@inject IJSRuntime JsRuntime


<div id="@ModalId" class="modal fade" data-backdrop="static" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @ChildContent
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" @onclick="Confirm">@ConfirmButtonText</button>
                <button type="button" class="btn btn-danger" @onclick="Cancel">@CancelButtonText</button>
            </div>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public string ModalId { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string CancelButtonText { get; set; }

    [Parameter]
    public string ConfirmButtonText { get; set; }


    private TaskCompletionSource<bool> _resultTask;
    
    public Task<bool> Open()
    {
        _resultTask = new TaskCompletionSource<bool>();
        Show();
        return _resultTask.Task;
    }

    private void Confirm()
    {
        _resultTask.SetResult(true);
        Hide();
    }

    private void Cancel()
    {
        _resultTask.SetResult(false);
        Hide();
    }

    private void Show()
        => JsRuntime.InvokeAsync<string>("ShowModal", ModalId);

    private void Hide()
        => JsRuntime.InvokeAsync<string>("HideModal", ModalId);

}